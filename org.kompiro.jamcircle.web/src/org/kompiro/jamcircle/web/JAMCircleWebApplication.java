package org.kompiro.jamcircle.web;import static java.lang.String.format;import java.util.Arrays;import java.util.Collection;import org.eclipse.core.runtime.*;import org.eclipse.core.runtime.jobs.Job;import org.kompiro.jamcircle.kanban.model.*;import org.vaadin.artur.icepush.ICEPush;import com.vaadin.Application;import com.vaadin.data.util.BeanItemContainer;import com.vaadin.event.ItemClickEvent;import com.vaadin.event.ItemClickEvent.ItemClickListener;import com.vaadin.event.dd.DragAndDropEvent;import com.vaadin.event.dd.DropHandler;import com.vaadin.event.dd.acceptcriteria.AcceptAll;import com.vaadin.event.dd.acceptcriteria.AcceptCriterion;import com.vaadin.incubator.dragdroplayouts.DDAbsoluteLayout;import com.vaadin.incubator.dragdroplayouts.client.ui.LayoutDragMode;import com.vaadin.terminal.ClassResource;import com.vaadin.terminal.Resource;import com.vaadin.ui.*;public class JAMCircleWebApplication extends Application {	private static final long serialVersionUID = 1L;	private ICEPush push = new ICEPush();	private WebContext context;	private Window mainWindow;	private Table boardSelection;	@SuppressWarnings("serial")	@Override	public void init() {		context = WebContext.getDefault();		initMain();		initLeft();		final Panel boardPanel = new Panel();		boardPanel.setCaption("board body");		boardSelection.addListener(new ItemClickListener() {			@Override			public void itemClick(ItemClickEvent event) {				AbsoluteLayout boardLayout = new AbsoluteLayout();				boardLayout.setWidth("1000px");				boardLayout.setHeight("1000px");				Board board = getBoard(event);				Lane[] lanes = board.getLanes();				for (Lane lane : lanes) {					AbsoluteLayout laneLayout = createLaneFigure(boardLayout, lane);					Card[] cards = lane.getCards();					for (Card card : cards) {						createCardFigure(laneLayout, card);					}				}				Card[] cards = board.getCards();				for (Card card : cards) {					createCardFigure(boardLayout, card);				}				boardPanel.setContent(boardLayout);				String message = "'%s' is opened.";				mainWindow.showNotification(format(message, board.getTitle()));			}			private AbsoluteLayout createLaneFigure(AbsoluteLayout boardLayout, Lane lane) {				Panel lanePanel = new Panel();				lanePanel.setCaption(lane.getContainerName());				lanePanel.setWidth(toPx(lane.getWidth()));				lanePanel.setHeight(toPx(lane.getHeight()));				String location = getLocation(lane.getX(), lane.getY());				boardLayout.addComponent(lanePanel, location);				// Create a absolute layout				DDAbsoluteLayout layout = new DDAbsoluteLayout();				layout.setSizeFull();				layout.setCaption("Absolute Layout");				// Enable dragging components				layout.setDragMode(LayoutDragMode.CLONE);				// Enable dropping components				layout.setDropHandler(new DropHandler() {					@Override					public void drop(DragAndDropEvent event) {						Panel component = (Panel) event.getTransferable().getData("component");						int x = Integer.valueOf(event.getTargetDetails().getData("relativeLeft").toString());						int y = Integer.valueOf(event.getTargetDetails().getData("relativeTop").toString());						String location = getLocation(x, y);						DDAbsoluteLayout layout = (DDAbsoluteLayout) event.getTargetDetails().getTarget();						layout.removeComponent(component);						layout.addComponent(component, location);					}					@Override					public AcceptCriterion getAcceptCriterion() {						return AcceptAll.get();					}				});				lanePanel.setContent(layout);				return layout;			}			private String toPx(int value) {				return value + "px";			}			private void createCardFigure(final AbsoluteLayout boardLayout, Card card) {				Panel cardContainer = new Panel();				AbsoluteLayout layout = new AbsoluteLayout();				cardContainer.setWidth(toPx(138));				cardContainer.setHeight(toPx(76));				Label label = new Label(card.getSubject());				int x = card.getX();				int y = card.getY();				String location = getLocation(x, y);				layout.addComponent(label, getLocation(0, 0));				cardContainer.setContent(layout);				boardLayout.addComponent(cardContainer, location);			}			private String getLocation(int x, int y) {				String location = String.format("left: %dpx;top: %dpx;", x, y);				return location;			}			private Board getBoard(ItemClickEvent event) {				return (Board) event.getItemId();			}		});		mainWindow.addComponent(boardPanel);		// final Tree tree = new Tree("Board");		// boardSelection.addListener(new ItemClickListener() {		//		// @Override		// public void itemClick(ItemClickEvent event) {		// BoardHierarchy newDataSource = new BoardHierarchy(getBoard(event));		// tree.setContainerDataSource(newDataSource);		// }		//		// private Board getBoard(ItemClickEvent event) {		// return (Board) event.getItemId();		// }		// });		// tree.setItemCaptionMode(AbstractSelect.ITEM_CAPTION_MODE_PROPERTY);		// tree.setItemCaptionPropertyId("caption");		// mainWindow.addComponent(tree);		Job job = new Job("test") {			protected IStatus run(IProgressMonitor monitor) {				mainWindow.showNotification("modified");				push.push();				// schedule(10000L);				return Status.OK_STATUS;			};		};		job.schedule(2000L);	}	private void initLeft() {		boardSelection = new Table("Boards");		Resource icon = new ClassResource("icons/kanban.gif", this);		boardSelection.setIcon(icon);		boardSelection.setSelectable(true);		mainWindow.addComponent(push);		mainWindow.addComponent(boardSelection);		Board[] boards = context.getKanbanService().findAllBoard();		BeanItemContainer<Board> boardSource = new BeanItemContainer<Board>(Board.class) {			private static final long serialVersionUID = 1L;			@Override			public Collection<String> getContainerPropertyIds() {				return Arrays.asList(new String[] { "title" });			}		};		boardSelection.setContainerDataSource(boardSource);		for (Board board : boards) {			boardSource.addBean(board);		}		setMainWindow(mainWindow);	}	private void initMain() {		mainWindow = new Window("JAM Circle");		Resource icon = new ClassResource("icons/kanban.gif", this);		mainWindow.setIcon(icon);		mainWindow.addComponent(push);		ComponentContainer content = new HorizontalLayout();		mainWindow.setContent(content);	}}