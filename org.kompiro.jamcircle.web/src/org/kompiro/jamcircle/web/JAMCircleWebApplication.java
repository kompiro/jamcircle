package org.kompiro.jamcircle.web;import static java.lang.String.format;import java.beans.PropertyChangeEvent;import java.beans.PropertyChangeListener;import java.util.Arrays;import java.util.Collection;import org.eclipse.core.runtime.*;import org.eclipse.core.runtime.jobs.Job;import org.kompiro.jamcircle.kanban.model.*;import org.kompiro.jamcircle.storage.model.GraphicalEntity;import org.kompiro.jamcircle.web.figure.CardFigure;import org.kompiro.jamcircle.web.figure.LaneFigure;import org.kompiro.jamcircle.web.figure.dd.CardAccept;import org.vaadin.artur.icepush.ICEPush;import com.vaadin.Application;import com.vaadin.data.util.BeanItemContainer;import com.vaadin.event.ItemClickEvent;import com.vaadin.event.ItemClickEvent.ItemClickListener;import com.vaadin.event.dd.DragAndDropEvent;import com.vaadin.event.dd.DropHandler;import com.vaadin.event.dd.acceptcriteria.AcceptCriterion;import com.vaadin.incubator.dragdroplayouts.DDAbsoluteLayout;import com.vaadin.incubator.dragdroplayouts.DDAbsoluteLayout.AbsoluteLayoutTargetDetails;import com.vaadin.incubator.dragdroplayouts.client.ui.LayoutDragMode;import com.vaadin.incubator.dragdroplayouts.events.LayoutBoundTransferable;import com.vaadin.terminal.ClassResource;import com.vaadin.terminal.Resource;import com.vaadin.ui.*;public class JAMCircleWebApplication extends Application implements PropertyChangeListener {	private static final long serialVersionUID = 1L;	private ICEPush push = new ICEPush();	private WebContext context;	private Window mainWindow;	private Table boardSelection;	private Board board;	private DDAbsoluteLayout boardLayout;	@SuppressWarnings("serial")	@Override	public void init() {		context = WebContext.getDefault();		initMain();		initLeft();		final Panel boardPanel = new Panel();		boardPanel.setCaption("board body");		createBoard(boardPanel);		boardSelection.addListener(new ItemClickListener() {			@Override			public void itemClick(ItemClickEvent event) {				board = getBoard(event);				load(boardPanel);				String message = "'%s' is opened.";				mainWindow.showNotification(format(message, board.getTitle()));			}			private Board getBoard(ItemClickEvent event) {				return (Board) event.getItemId();			}		});		mainWindow.addComponent(boardPanel);		// final Tree tree = new Tree("Board");		// boardSelection.addListener(new ItemClickListener() {		//		// @Override		// public void itemClick(ItemClickEvent event) {		// BoardHierarchy newDataSource = new BoardHierarchy(getBoard(event));		// tree.setContainerDataSource(newDataSource);		// }		//		// private Board getBoard(ItemClickEvent event) {		// return (Board) event.getItemId();		// }		// });		// tree.setItemCaptionMode(AbstractSelect.ITEM_CAPTION_MODE_PROPERTY);		// tree.setItemCaptionPropertyId("caption");		// mainWindow.addComponent(tree);		Job job = new Job("test") {			protected IStatus run(IProgressMonitor monitor) {				boardLayout.removeAllComponents();				boardLayout.requestRepaintAll();				load(boardPanel);				push.push();				schedule(60000L);				return Status.OK_STATUS;			};		};		job.schedule(2000L);	}	private void createBoard(Panel boardPanel) {		boardPanel.setData(board);		boardLayout = new DDAbsoluteLayout();		boardLayout.setDragMode(LayoutDragMode.CLONE);		boardLayout.setWidth("1000px");		boardLayout.setHeight("1000px");		boardLayout.setDropHandler(new DropHandler() {			private static final long serialVersionUID = 4609766852820639331L;			@Override			public AcceptCriterion getAcceptCriterion() {				return CardAccept.get();			}			@Override			public void drop(DragAndDropEvent event) {				Panel component = getComponent(event);				AbsoluteLayoutTargetDetails targetDetails = (AbsoluteLayoutTargetDetails) event.getTargetDetails();				int x = targetDetails.getRelativeLeft();				int y = targetDetails.getRelativeTop();				DDAbsoluteLayout layout = (DDAbsoluteLayout) targetDetails.getTarget();				LayoutBoundTransferable transferable = (LayoutBoundTransferable) event.getTransferable();				DDAbsoluteLayout sourceLayout = (DDAbsoluteLayout) transferable.getSourceComponent();				remove(component, sourceLayout);				add(component, x, y, layout);			}			private void add(Panel component, int x, int y, DDAbsoluteLayout layout) {				GraphicalEntity entity = getGraphicalEntity(component);				entity.setX(x);				entity.setY(y);				String location = getLocation(x, y);				if (entity instanceof Card) {					Panel panel = (Panel) layout.getParent();					Card card = (Card) entity;					CardContainer parent = (CardContainer) panel.getData();					parent.addCard(card);				}				entity.save(false);				layout.addComponent(component, location);			}			private void remove(Panel component, DDAbsoluteLayout layout) {				GraphicalEntity entity = getGraphicalEntity(component);				layout.removeComponent(component);				if (entity instanceof Card) {					Panel panel = (Panel) (layout.getParent());					CardContainer parent = (CardContainer) panel.getData();					Card card = (Card) entity;					parent.removeCard(card);				}			}			private GraphicalEntity getGraphicalEntity(Panel component) {				return (GraphicalEntity) component.getData();			}			private Panel getComponent(DragAndDropEvent event) {				return (Panel) event.getTransferable().getData("component");			}			private String getLocation(int x, int y) {				String location = String.format("left: %dpx;top: %dpx;", x, y);				return location;			}		});		boardPanel.setContent(boardLayout);	}	private void load(Panel boardPanel) {		createBoard(boardPanel);		if (board == null)			return;		context.getKanbanService().flushBoard(board);		board.addPropertyChangeListener(this);		Lane[] lanes = board.getLanes();		for (Lane lane : lanes) {			LaneFigure laneFigure = createLaneFigure(lane);			boardLayout.addComponent(laneFigure.getPanel(), laneFigure.getLocation());			Card[] cards = lane.getCards();			for (Card card : cards) {				createCardFigure(laneFigure.getLayout(), card);			}		}		Card[] cards = board.getCards();		for (Card card : cards) {			createCardFigure(boardLayout, card);		}	}	private LaneFigure createLaneFigure(Lane lane) {		LaneFigure figure = new LaneFigure(lane);		lane.addPropertyChangeListener(this);		return figure;	}	private CardFigure createCardFigure(AbsoluteLayout layout, Card card) {		CardFigure figure = new CardFigure(layout, card);		card.addPropertyChangeListener(this);		return figure;	}	private void initLeft() {		boardSelection = new Table("Boards");		Resource icon = new ClassResource("icons/kanban.gif", this);		boardSelection.setIcon(icon);		boardSelection.setSelectable(true);		mainWindow.addComponent(push);		mainWindow.addComponent(boardSelection);		Board[] boards = context.getKanbanService().findAllBoard();		BeanItemContainer<Board> boardSource = new BeanItemContainer<Board>(Board.class) {			private static final long serialVersionUID = 1L;			@Override			public Collection<String> getContainerPropertyIds() {				return Arrays.asList(new String[] { "title" });			}		};		boardSelection.setContainerDataSource(boardSource);		for (Board board : boards) {			boardSource.addBean(board);		}		setMainWindow(mainWindow);	}	private void initMain() {		mainWindow = new Window("JAM Circle");		Resource icon = new ClassResource("icons/kanban.gif", this);		mainWindow.setIcon(icon);		mainWindow.addComponent(push);		ComponentContainer content = new HorizontalLayout();		mainWindow.setContent(content);	}	@Override	public void propertyChange(PropertyChangeEvent evt) {		push.push();	}}