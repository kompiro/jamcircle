<project name="Build specific targets and properties" default="noDefault">
    <taskdef resource="net/sf/antcontrib/antlib.xml">
      <classpath>
        <pathelement location="${buildHome}/build-files/ant-contrib.jar"/>
      </classpath>
    </taskdef>

	<!-- =====================================================================
	    
	    The Following Properties are available in all targets:
		 - eclipse.base : the base folder everything will be collected into
		 - eclipse.plugins : the plugins folder
		 - eclipse.features: the features folder
		 - archiveFullPath : the full path of the final archive once it is created
		 
		 ===================================================================== -->
		 
	<!-- =====================================================================  -->
	<!-- Called after each invocation of the gather.bin.parts target on the     -->
	<!-- individual plugins and features.                                       -->
	<!-- Available properties are:                                              -->
	<!--   projectLocation: location of the project being gathered              -->
	<!--   projectName: symbolic name with version (org.eclipse.foo_1.0.0.v123) -->
	<!--   target.folder: the destination, eclipse/plugins or eclipse/features  -->
	<!--                                                                        -->
	<!-- The generated pattern is that plugins/features are gathered into the   -->
	<!-- folder ${target.folder}/${projectName}                                 -->
	<!-- =====================================================================  -->
	<target name="gather.bin.parts">
	</target>
	
	<!-- ===================================================================== -->
	<!-- Called after invoking the gather.bin.parts targets for all plugins    -->
	<!-- and features. Results exist as folders and have not yet been jarred.  -->
	<!-- ===================================================================== -->
	<target name="post.gather.bin.parts">
		<signjar keystore="${sign.keystore}" 
			alias="${sign.alias}" 
			storepass="${sign.storepass}">
			<fileset dir="${buildDirectory}/buildRepo/plugins">
				<include name="org.kompiro.*"/>
				<include name="org.apache.bsf*"/>
				<include name="org.jruby*"/>
				<include name="org.mozilla*"/>
				<include name="org.jivesoftware*"/>
				<exclude name="*test*"/>
			</fileset>
			<fileset dir="${buildDirectory}/buildRepo/features">
				<include name="org.kompiro.*"/>
			</fileset>
		</signjar>
	</target>

	<!-- ===================================================================== -->
	<!-- Called just prior to signing a jar                                    -->
	<!-- In addititon to the properties listed above:						   -->
	<!--    - source : plugins or features directory                           -->
	<!--    - elementName: element being signed without .jar                   -->
	<!--                   (eg "org.eclipse.foo_1.0.0"                         -->
	<!-- ===================================================================== -->
	<target name="pre.jarSigning">
	</target>

	<!-- ===================================================================== -->
	<!-- Called after all plugins and features have been jarred                -->
	<!-- (and potentially signed)                                              -->
	<!-- ===================================================================== -->
	<target name="post.jarUp">
	</target>

	<!-- ===================================================================== -->
	<!-- Called just before the archive file is built                          -->
	<!-- In addititon to the properties listed above:						   -->
	<!--    - rootFolder : the folder containing the root files                -->
	<!-- ===================================================================== -->
	<target name="pre.archive" if="isRCPBuild">
		<ant antfile="${genericTargets}" target="runDirector" inheritAll="true">
			<property name="p2.repo" value="${p2.build.repo}"/>
			<property name="p2.director.iu" value="org.kompiro.jamcircle.kanban.feature.group"/>
			<property name="p2.director.installPath" value="${eclipse.base}"/>
		</ant>
		<ant antfile="${genericTargets}" target="runDirector" inheritAll="true">
			<property name="p2.repo" value="${p2.build.repo}"/>
			<property name="p2.director.iu" value="org.kompiro.jamcircle.rcp.feature.group"/>
			<property name="p2.director.installPath" value="${eclipse.base}"/>
		</ant>
		<ant antfile="${genericTargets}" target="runDirector" inheritAll="true">
			<property name="p2.repo" value="${p2.build.repo}"/>
			<property name="p2.director.iu" value="org.kompiro.jamcircle.xmpp.feature.group"/>
			<property name="p2.director.installPath" value="${eclipse.base}"/>
		</ant>
		<ant antfile="${genericTargets}" target="runDirector" inheritAll="true">
			<property name="p2.repo" value="${p2.build.repo}"/>
			<property name="p2.director.iu" value="org.kompiro.jamcircle.scripting.feature.group"/>
			<property name="p2.director.installPath" value="${eclipse.base}"/>
		</ant>
		<antcall target="runCategorizer">
			<param name="p2.repo" value="${p2.build.repo}"/>
			<param name="p2.category.xml" value="file:${buildHome}/build-files/category.xml"/>
		</antcall>
		<if>
		 <equals arg1="${os}" arg2="macosx" />
		 <then>
		 	<property name="tmpFolder" location="/tmp/org.kompiro.jamcircle.builder/tmp/jamcircle"/>

		 	<move file="${tmpFolder}/${launcherName}.app/Contents/MacOS/jamcircle.ini" 
		 		tofile="${tmpFolder}/${launcherName}.app/Contents/MacOS/${launcherName}.ini" 
		 		overwrite="true"/>
		 </then>
		</if>
	</target>
	
	<!-- Invoke the p2 director to perform an install  -->
	<target name="runCategorizer" >
		<property name="p2.director.profile" value="profile" />
		<property name="p2.director.version" value="" />
		<!-- by default, fork using the same config area we are running under -->
		<property name="p2.director.configArea" value="${osgi.configuration.area}" />
		<condition property="p2.director.devMode" value="-dev &quot;${osgi.dev}&quot;" else="">
			<isset property="osgi.dev" />
		</condition>
		
		<java jar="${equinoxLauncherJar}" fork="true" failonerror="false" resultproperty="p2.categorizer.return.code" outputproperty="p2.categorizer.java.output">
			<arg line="-application org.eclipse.equinox.p2.publisher.CategoryPublisher" />
			<arg line="-nosplash" />
			<arg line="--launcher.suppressErrors" />
			<arg line="-consoleLog" />
			<arg line="-metadataRepository"/>
			<arg value="${p2.repo}" />
			<arg line="-categoryDefinition ${p2.category.xml}"/>
			<jvmarg value="-Declipse.p2.data.area=${p2.director.dataArea}" />
			<jvmarg value="-Declipse.p2.profile=@none" />
			<sysproperty key="osgi.configuration.area" value="${p2.director.configArea}" />
		</java>
		<echo message="${p2.categorizer.java.output}" />
		<condition property="p2.categorizer.error">
			<isfailure code="${p2.categorizer.return.code}" />
		</condition>
		<fail if="p2.categorizer.error" message="A Problem occured while running the categorizer." />
	</target>

	
	<!-- ===================================================================== -->
	<!-- Default target                                                        -->
	<!-- ===================================================================== -->
	<target name="noDefault">
		<echo message="You must specify a target when invoking this file" />
	</target>

</project>
