<?xml version="1.0"?>

<project name="Update Bug State" default="updateBugState">

	<taskdef name="UpdateBugState" 
	  classname="org.eclipse.releng.services.bugzilla.UpdateBugStateTask" 
	  classpath="../bugTools.jar"/>

	<!-- 1. Define property file -->
	<target name="init">
		<property file="../properties/UpdateBugStateTask.properties"/>
	</target>

	<!-- 2. Update Bugzilla state for specific criteria -->
	<target name="updateBugState" depends="init" description="Update Bugzilla state for specific criteria">
		<!--
		UpdateBugStateTask takes a few parameters, some are required and some are optional, see below.
		milestone, product and resolution correspond to the Bugzilla items of the same name

		login - required, your userid for Bugzilla (can be generated by UpdateBugStateTask.sh)

		logincookie - required, your logincookie for Bugzilla (can be generated by UpdateBugStateTask.sh)

		status - required, only query for bugs in this state
		one of UNCONFIRMED, NEW, ASSIGNED, or REOPENED

		bugList - optional, specify the list of bugs to update
		a non-digit (space, comma, semicolon, etc) delimited list of integers corresponding to Bugzilla bugIDs
		if you specify this, you cannot specify milestone or product

		product - required (if no bugList), only query for bugs on this product
		this cargument annot be combined with bugList

		buildAlias - optional label, the task adds a comment to Bugzilla of the form
		"Fixed in $buildAlias ($buildID).", otherwise uses buildID or just "Fixed in latest build."

		buildID - optional label, the task adds a comment to Bugzilla of the form
		"Fixed in $buildAlias ($buildID).", otherwise uses buildAlias or just "Fixed in latest build."
		of the format YYYYMMDDHHMM, [IMNRS]YYYYMMDDHHMM, [IMNRS]-YYYYMMDDHHMM
		YYYYMMDD-HHMM, [IMNRS]YYYYMMDD-HHMM, or [IMNRS]-YYYYMMDD-HHMM

		endDate - optional, only query for bugs last updated before this timestamp
		(that is, bugs after this timestamp will be ignored). Must be in the form yyyymmddHHMM or yyyymmdd0000.
		this argument cannot be combined with bugList

		milestone - optional, only query for bugs that have this milestone
		this argument cannot be combined with bugList

		resolution - optional, this is what the bug's new state will be
		one of FIXED, INVALID, WONTFIX, LATER, REMIND, or WORKSFORME (default: FIXED)

		debug - optional, use this to control task verbosity
		0 - only print a message if the task needs to abort
		1 - show progress (and errors, if any) (default)
		2 - maximum verbosity, probably only useful if something goes wrong
		values < 0 are equivalent to 0
		values > 2 are equivalent to 2
		
		Examples: -->
		
		<!--
		1. find all bugs last updated before 2006/06/01 17:38 from product EMF in the ASSIGNED state;
		   move to FIXED using buildID S200606051102 and buildAlias 2.2.0RC7. Comment will be:
		     "Fixed in 2.2.0RC7 (S200606051102)."
		-->
		<UpdateBugState login="${login}" logincookie="${logincookie}" 
			status="ASSIGNED" product="EMF" endDate="200606011738" 
			resolution="FIXED" buildID="S200606051102" buildAlias="2.2.0RC7" 
		/>
		
		<!--
		2. find all bugs from product EMF targetted for milestone "2.2" which are in the ASSIGNED state; 
		   move to FIXED. Comment will be:
			 "Fixed in latest build."
		-->
		<UpdateBugState debug="2" login="${login}" logincookie="${logincookie}"
              status="ASSIGNED" product="EMF"
				resolution="FIXED" milestone="2.2"
        />
		
		<!--
		3. find all bugs in given list (131811 144877 144890 144989) which are still in the ASSIGNED state 
		   (to avoid duplicate updates); move to FIXED using buildID I200606051102. Comment will be:
		     "Fixed in I200606051102."
		-->
		<UpdateBugState login="${login}" logincookie="${logincookie}" 
			status="ASSIGNED" bugList="131811 144877 144890 144989" 
			resolution="FIXED" buildID="S200606051102" 
		/> 
		
	</target>
</project>